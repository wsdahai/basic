
微服务设计开发手册

 
1.	前言
1.1.	目的
使开发人员、测试人员、运维人员能正确使用微服务架构技术来开发业务系统。
1.2.	文档范围
本文档描述基于微服务架构技术来开发业务系统的开发方式、规范、注意事项。
1.3.	术语与缩略词
术语、缩略词	解释
领域	指某一专业性范围，实现某经营业务目标的一系列业务流程、功
能的组合。
业务子领域	指在业务领域内某些紧密相关业务对象组成的一个较小的业务范
围。
微服务	基于某个业务子领域或特定功能的、独立部署的、具有内置的通
信机制和服务注册与服务发现的，对外提供服务的实体。
业务应用	指面向用户使用的特定业务场景下功能的组合。 与微服务的区别是业务应用面向用户，一般不会被重用，实现用户操作功能逻
辑，随产品或市场需求易变，不稳定。
2.	微服务架构体系
一个完整的微服务架构技术体系包括微服务开发框架、微服务监控、统一配置中心、注册中心、网关、服务治理、微服务持续集成、微服务自动化部署。
目前，顺航的微服务架构体系中，暂没有包含微服务监控和自动化部署。微服务监控目前采用公司的运维手段解决；自动化部署目前还没有实践。


3.	微服务系统部署
基于顺航目前的业务规模，公司层面统一部署一套微服务平台的生成环境，顺航各业务系统可以接入到该生产环境。各业务系统同微服务平台的关系，如下图所示（以新一代运控系统为例）：

 

4.	微服务设计方法与规范
4.1.	微服务架构适用范围
微服务架构并不是适用所有的系统开发场景，在选择是否采用微服务架构时考虑以下方面：
A）	是否只对外提供服务接口。
B）	提供的业务服务具有一定的业务逻辑。

下面场景一般不采用微服务架构：
A)	面向终端用户操作的系统，这类系统主要重点是界面展示、操作类的逻辑。例如各种 web 应用、后台管理应用等。
B)	针对某个移动 APP 的后台应用，该类应用主要是处理 APP 本身的相关逻辑（功能展示、操作步骤、回话信息处理等）以及对业务服务（微服务）进行包装组合。
C)	不对外提供服务接口及用户访问的后台应用，例如定时 Job 应用，实时计算应用等。
4.2.	微服务划分方法/粒度
4.2.1.	拆分微服务方法
1.	垂直拆分。 按照不同的业务域进行拆分，例如订单、商品、客户等。形成独立的业务领域微服务。
2.	横向拆分。将一个业务功能内的不同模块或组件进行拆分。例如把公共组件进行拆分成独立的微服务，例如查询服务、打印服务、推送通知服务等。
4.2.2.	服务粒度
微服务的粒度是“决策”，而不是“标准答案”。微服务划分本身是“架构设计”，绝不是只讲“太大”或“太小”标准答案的“是非题”。
影响“架构决策”的因素：
1.	市场业务的扩展性。
2.	与已有架构的冲突。
3.	开发团队在开发上所可能面临的风险。
4.	测试人员的测试执行效率。
细粒度的优点：
1.	扩容与缩容方便，有利于提高资源的利用率。
2.	容错相对更好。
3.	扩展性更好。
4.	职责更单一、内聚性更好。
细粒度的缺点：
1.	系统越复杂。
2.	依赖关系更复杂。
3.	运维复杂度更高。
4.	监控更加复杂，出问题定位问题更难。
4.3.	微服务划分需满足的标准
1.	满足划分出来的微服务不存在循环依赖。
2.	具有独立的业务功能。
3.	微服务一般不跨多个数据库，不同存储方式除外，例如同时使用关系数据库和 Nosql 数据库； 读写分离、分库分表除外。例如将订单列表信息放到一个数据库，订单明细放到另外一个
数据库，订单微服务访问这两个数据库，这种做法不建议。
4.	对同一业务对象操作(增、删、改)的服务不进行拆分，不应出现多个微服务操作同一数据对象。
4.4.	微服务调用规范
1.	同一套环境内（同一领域）的微服务之间采用 RPC 直接调用方式。
2.	微服务之间不允许循环依赖调用，调用层次尽量不要超过三层。
3.	不同环境之间调用微服务需通过网关调用，例如速运业务中的微服务需要调用某公共微服务， 则通过公共微服务的网关来调用该公共微服务。
4.	应用层通过网关调用微服务。
5.	微服务开发流程
 
6.	微服务开发方法与规范
6.1.	微服务开发步骤图


6.2.	微服务环境搭建
要求：SUN-JDK1.8、Maven3.0+、Zookeeper3.4.6

1.	按照要求设置对应的 JDK
2.	按照要求设置好对应的 maven 配置文件(包括账号、密码、profile)
3.	本地开发 zookeeper 部署可以单节点，测试线、生产线按照实际情况选择
4.	使用微服务模板快速创建微服务工程，微服务模板工程的maven坐标为：     
com.sf.sgs:sgs-template-archetype: sfa.1.0.1
6.3.	微服务 API 开发与设计规范（swagger，接口定义）
API 开发原则上需要满足Rest 接口设计规范。这里可以根据实际的情况进行变通。我们可以用GET 方法支持查询以及删除操作，POST 方法支持新增以及修改操作。
1.	接口命名规范：
http://IP:端口/微服务名/类注解 Path 值/方法注解值我们举例说明如下：
 


2.	接口定义规范
服务提供方默认设置两种 MediaType ， 一种是： application/json, 另外一种是：
text/xml。意思返回结果支持 json 和xml 格式
3.	每个接口需要加入@api 用于描述该接口的主要用途
4.	每个方法需要加入@ApiOperation 用于描述该方法的主要用途
5.	@path 命名不宜过长，每一段原则上不能超过 12 个字符(除 Leech 生成代码外)
6.	每个接口只能接收一个 Object，多个参数只能封装成对象（注：@PathParam 注解的参数不受限制）
6.4.	微服务内部实现指引（分层、分模块、编码、安全）

1）	分层、分模块
微服务工程的基本结构如下图：
 
它是采用 maven 的模块以及继承思想搭建，工程整体由 6 个子模块组成，每个模块编写的代码分工明确，不能随意变更。
模块具体描述如下：
*-client：用于定义 RPC、Http 接口，该模块会打包成 jar 提供给客户端调用。
*-common：微服务工程公共辅助类。
*-dao：数据层，这里基本是 mybatis 生成，存放 DB 层接口以及对应的 xml 文件
*-manager：事务管理层。
*-service：业务逻辑层，client 模块定义的接口实现层。
*-test：可以定义为一个dubbo简单的客户端。
模块的具体依赖关系如下：
*-dao--->*-common；*-dao--->*-client
*-manager--->*-dao; *-manager--->*-common
*-service--->*-manager; *-service--->*-client
2）	编码
涉及公共的接口进行修改时，需要对老版本进行兼容。不能出现不兼容的情况(除非已知这个接口已经要求全部调用方升级)。涉及到核心业务、敏感信息需要手动记录对应日志。对参数要进行合法性校验，对返回结果需要统一使用 Result<T>对象返回，不能自定义其他的返回对象。具体编写 java 代码规范参见公司的编码规范。
3）	安全
涉及到系统关键信息的，必须要求加密处理。比如数据库的密码、用户的敏感信息：手机号、身份信息等等
6.5.	微服务日志记录及规范
微服务日志记录采用框架定制的日志包，对应的 log4j 配置文件框架自带。当前框架日志结构只支持 log4j。
日志分为：Error(错误日志),System(系统日志),Trace(链路日志),Biz(业务日志)四种。
日志的基本格式为：时间\u0000 级别\u 0000IP\u0000 线程ID\u0000 组件名\u0000 模块名
\u0000 类名\u0000 方法名\u0000 具体日志消息\u0000 日志默认保存三天，如果需要保存多日修改如下值：
<appender name="SF.ERROR" class="com.sf.sgs.sflog.log4j.appender.SFDailyRollingFileAppender">
<param name="datePattern" value="'.'yyyy-MM-dd" />
<param name="file" value="./logs/error.log" />
<!--文件保存天数,默认为3天-->
<param name="maxBackupIndex" value="7" />
<layout class="com.sf.sgs.sflog.log4j.layout.SfPatternLayout"> 

</layout>
<filter class="org.apache.log4j.varia.LevelRangeFilter">
<param name="levelMin" value="error" />
<param name="levelMax" value="error" />
<param name="acceptOnMatch" value="true" />
</filter>
</appender>
日志使用其他要求：
1.	开发阶段可以开启 console，发布时需要关闭。
2.	开发阶段可以开启 LoggingFilter，发布的时候需要关闭。
 
关闭方式：
<!--针对，request以及reponse的信息配置输出级别，生产线请配置为error-->
<logger name="com.alibaba.dubbo.rpc.protocol.rest.support" additivity="true">
<level value="info"/>
<appender-ref ref="console" />
</logger>
3.	其他见公司安全部门发布的《安全日志规范》要求。

6.6.	微服务监控规范
微服务的监控主要采用分析日志行为得到微服务健康状态。用户在部署时需要对应开启配置开关：
1.	开启系统 Trace 链路日志开关：dubbo.trace.flag=true
2.	开启cpu以及线程池开关：dubbo.threadpool.mointor=true
3.	配置线程池监控频率：dubbo.threadpool.frequency=5000 (单位是：ms)
默认模板框架配置即可。
生产部署后需要运维对应启用Agent 采集器。
Agent 采集器具体使用见：
http://sfpp.sf-express.com/sfpp- frontend/public/opensoftware.html?pcompSoftwareId=0000107cc4ed8_1b11_4c0d_9e a7_f1d2cda345ab&pcompArticleId=00001249ce591_b206_40f3_b79b_ffd2907198b5
 

6.7.	微服务集中配置设计与规范
微服务默认采用Disconf（动态配置中心）管理配置，原则上在工程代码里只会存留两个配置 文件，一个是disconf.properties,另一个是 dubbo.properties。其他配置文件全部落入动态配置中心。如果存在某些配置需要根据环境进行变更的，可以在本地存放一个名为
dynamic.properties 的文件。
新增的这个properties 文件和需要存入src/main/assembly 下的 conf 目录。
看一个具体的实例：

  
 

6.8.	微服务单元测试方法与规范
原则：工程的每个层的核心类以及方法都需要编写对应的测试用例
1.	单元测试建议一个方法至少一个测试用例（原则上所有分支都应该有对应测试方法覆盖）。
2.	测试框架采用Junit4 以及 Easymock（可以引入其他 mock 测试框架）。
3.	编写单元测试类请选择性继承如下两个基类：
A、BaseRollbackTest
该类可以实现数据入库回滚，使得测试用例可以都次运行。
B、BaseTest
该类可以数据入库直接保存。
4.	单元测试方法都必须实现结果断言，不能使用输出语句或者没有断言代码。
6.9.	微服务打包部署规范
1.	打包阶段
开发测试过程中打出的服务间调用jar 包要求为SNAPSHOT 包，测试完毕确定没有问题时才打对应的 Release 包，打出的 release 包需要告知对应调用方的 maven 坐标。
原则：存入 nexus 上release 线的 jar，一个个版本进行新增，禁止删除jar 包。修改对应版本命令：mvn versions:set -DnewVersion=1.0.1-SNAPSHOT 如果需要打生产的包则对应 : -DnewVersion=1.0.1
上传jar 到私库命令：mvn clean source:jar package deploy -Dmaven.test.skip=true
回滚版本值命令：mvn versions:revert
让版本修改保存命令：mvn versions:commit
2.	部署阶段
部署过程主要包括三个方面的信息：一、配置；2、DB 脚本、3、部署包。
配置规范：配置需走线上流程，由开发提交对应配置到 Git，经过测试没有问题，再通过配置中心同步到生产，禁止进行线下交付。
部署包规范：用于部署的包由测试人员从 sit 线打包测试完毕，提供给开发人员入基线。 单个虚拟机或docker 容器中只能部署 1 个微服务。
7.	微服务常见问题
1.	Maven 报 401 权限错误可能的原因：一、settings.xml 配置密码错误或者过期，二、配置的 id 错误
2.	Eclipse 启动时报 log 类找不到原因：一、jar 冲突，可以包 sflog 相关包优先设置加载；二、eclipse 版本问题，可以采用 Kepler Service Release 2 版本(不建议用最新eclipse)
3.	在老的 workspace 下导入模板工程一直报 maven 方面的错误，update 多次没有用原因：一、eclipse 内部问题，新启动一个新的 workspace
4.	微服务开发过程报调用方找不到原因：一、可能服务提供方设置了版本号；二、服务提供方真是没有注册到 zk； 三、服务提供方设置了白名单
5.	加载过程老报某配置文件找不到原因：一、看 disconf 上是否配置了该文件；二、配置文件名是否正确；
